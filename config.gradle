//使用方法 在项目根目录build.gradle顶部添加-> apply from: "config.gradle"

//BuildConfigField类型，其它gradle可以直接调用这些类型
ext.BOOLEAN = "boolean"
ext.TRUE = "true"
ext.FALSE = "false"

//所有gradle统一配置
subprojects {
    afterEvaluate { project ->
        //引用阿里巴巴Arouter插件（实现路由表自动加载，优化初始化速度）
        project.apply plugin: 'com.alibaba.arouter'

        def plugins = getPlugins()
        def isApp = plugins.hasPlugin("com.android.application")
        def isAppLib = plugins.hasPlugin("com.android.library")
        //project是否引用aspectjx插件（根据各模块需求）
        def hasAspectJx  = plugins.hasPlugin("android-aspectjx")
        //project是否引用ProtoBuf（根据各模块需求）
        def hasProtoBuf = plugins.hasPlugin("com.google.protobuf")

        if (isApp || isAppLib || hasAspectJx || hasProtoBuf) {
            android {
                compileSdkVersion build_versions.complile_sdk
                buildToolsVersion build_versions.build_tools

                defaultConfig {
                    minSdkVersion build_versions.min_sdk
                    targetSdkVersion build_versions.target_sdk
                    consumerProguardFiles 'consumer-rules.pro'
                    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
                    multiDexEnabled true
                    vectorDrawables.useSupportLibrary = true

                    // 显式声明支持注解
                    javaCompileOptions {
                        annotationProcessorOptions {
                            arguments = [AROUTER_MODULE_NAME: project.getName()]
                        }
                    }
                }

                sourceSets {
                    main {
                        if(hasProtoBuf) {
                            proto {
                                //main目录新建proto目录
                                srcDir 'src/main/proto'
                                include '**/*.proto'
                            }

                            java {
                                srcDir 'src/main/java'
                            }
                        }
                    }
                }

                aaptOptions {
                    //关闭png 图片优化检查
                    cruncherEnabled = false
                    useNewCruncher = false
                }

                lintOptions {
                    //即使报错也不会停止打包
                    abortOnError false
                    //打包release版本的时候进行检测
                    checkReleaseBuilds false
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_8
                    targetCompatibility JavaVersion.VERSION_1_8
                }

                buildFeatures {
                    dataBinding true
                }

                buildTypes {
                    debug {
                        debuggable true
                        //debug模式关闭混淆
                        minifyEnabled false

                        if (isApp) {
                            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                        } else {
                            consumerProguardFiles 'proguard-rules.pro'
                        }
                    }
                    release {
                        debuggable false
                        //混淆
                        minifyEnabled true
                        //Zipalign优化
                        zipAlignEnabled true

                        if (isApp) {
                            //是否清理无用资源,依赖于minifyEnabled
                            shrinkResources true
                            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                        } else {
                            //module的混淆规则，打包时会合并到app
                            consumerProguardFiles 'proguard-rules.pro'
                        }
                    }
                }

                if(hasAspectJx){
                    aspectjx {
                        //编译时出现异常时，就把本项目包id include进来
                        //include "com.example.template"
                        //组件化代码在performable目录下
                        //include 'performable'
                        //排除所有package路径中包含`android.support`的class文件及库（jar文件）
                        exclude 'android.support'
                        exclude 'androidx'
                        exclude 'leakcanary'
                        exclude 'com.qmuiteam'
                        exclude "**/module-info.class"
                        exclude "META-INF.versions.9.module-info"
                        exclude "META-INF/versions/9/*.class"
                        exclude 'com.google', 'com.squareup', 'org.apache'
                    }
                }
            }

            if (project.hasProperty('dependencies')) {
                dependencies {
                    implementation fileTree(dir: 'libs', include: ['*.jar'])
                    testImplementation deps.junit
                    androidTestImplementation deps.runner
                    androidTestImplementation deps.espresso.core
                    annotationProcessor deps.arouter.compiler
                }
            }

            if(hasProtoBuf){
                //构建task
                protobuf {
                    protoc {
                        artifact = deps.protobuf.protoc
                    }

                    generateProtoTasks {
                        all().each { task ->
                            task.builtins {
                                remove java
                            }
                            task.builtins {
                                java {}
                                // Add cpp output without any option.
                                // DO NOT omit the braces if you want this builtin to be added.
                                // cpp {}
                            }
                        }
                    }
                    //生成目录
                    generatedFilesBaseDir = "$projectDir/src/generated"
                }
            }
        } else if (plugins.hasPlugin("java-library")) {

        }
    }
    // 重复依赖不同版本处理（指定一个版本）
//    project.configurations.all {
//        resolutionStrategy.eachDependency { details ->
//            if (details.requested.group == 'androidx.core') {
//                details.useVersion "1.3.0"
//            }
//        }
//    }
}